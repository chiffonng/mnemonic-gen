[project]
name = "mnemonic-gen"
version = "0.2.5"
description = "Generate mnemonic sentences for English words"
authors = [{ name = "My Chiffon Nguyen", email = "chiffonng136@gmail.com" }]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "bespokelabs-curator>=0.1.22",
  "datasets>=3.5.0", # Hugging Face datasets
  "huggingface-hub>=0.26.1",
  "instructor>=1.7.9", # handling structure outputs from LLMs
  "litellm>=1.61.3",
  "matplotlib>=3.9.2",
  "peft>=0.13.2 ; sys_platform == 'linux'",
  "pandas>=2.2.2",
  "pydantic>=2.11.2",
  "python-dotenv>=1.1.0",
  "rich>=13.9.4", # format rich text
  "structlog>=25.2.0",
  "tenacity>=9.1.2", # retrying library for handling rate limits and transient errors
  "torch==2.6.0 ; sys_platform == 'linux'",
  "transformers>=4.50.3 ; sys_platform == 'linux'",
  "trl>=0.11.4 ; sys_platform == 'linux'",
  "wandb>=0.19.0; sys_platform == 'linux'",
  "unsloth==2025.3.18 ; sys_platform == 'linux'",
  "unsloth_zoo==2025.3.16 ; sys_platform == 'linux'",
]
license = "Apache-2.0"
keywords = ["mnemonic", "mnemonic generation", "LLM", "language model", "chain of thought", "CoT", "synthetic data generation", "vocabulary learning", "vocabulary acquisition", "language learning", "natural language processing", "NLP", "machine learning", "ML", "deep learning", "DL", "AI", "artificial intelligence", "fine-tuning"]

[project.urls]
repository = "https://github.com/chiffonng/mnemonic-gen"
dataset    = "https://doi.org/10.57967/hf/3750"

# Development dependencies
[dependency-groups]
dev = [
    "deptry>=0.23.0",
    "ipykernel>=6.29.5",
    "pre-commit>=4.1.0",
    "pytest>=8.3.5",
    "ruff>=0.11.3",
]

[tool.ruff]
src            = ["src"]
target-version = "py311"

[tool.ruff.format]
docstring-code-format      = true # format code in docstrings
docstring-code-line-length = 88

[tool.ruff.lint]
exclude = ["*.ipynb", "data/*", "logs/*", "tmp/*", "venv/*"]
extend-select = [
  "B",   # flake8-bugbear, bugbear checks
  "D",   # pydocstyle, all functions and classes must have docstrings
  "I",   # isort
  "N", # pep8-naming conventions
#  "PL", # pylint # TODO: enable
  "PT",  # flakes8-pytest-style, pytest fixtures and style
  "PTH", # flake8-use-pathlib, use pathlib instead of os.path
]
extend-safe-fixes = [
#  "ANN",  # missing type annotation # TODO: enable
  "D",    # pydocstyle docstrings
  "DOC",  # pydoclint docstring conventions
  "F",    # pyflakes
  "I002", # missing import
  "ICN",  # import conventions
  "LOG",  # logging conventions
  "Q",    # flake8-quotes
]
extend-fixable = ["B", "D"]
ignore = ["T201", "T203", "F401"] # print, pprint statements OK, unused imports OK
flake8-type-checking.quote-annotations = true
isort.case-sensitive = true
pydocstyle.convention = "google"
pycodestyle.max-doc-length = 88

[tool.ruff.lint.flake8-annotations] # type annotations
ignore-fully-untyped = true # ignore fully untyped functions
mypy-init-return = true  # omit return type in __init__ OK

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["D", "F401"]

[tool.uv]
python-downloads = "manual"         # change to "automatic" to download Python specified in .python-version
managed          = true

[tool.uv.pip]
upgrade-package  = ["ruff", "pre-commit"]
